name: Build and Test

on:
  pull_request:

jobs:
  unit-test:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
      - name: 'Install Node'
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: |
            - recursive: true
              args: [--frozen-lockfile]
            - args: [--global, gulp, prettier, vitest]
      - name: 'Run Unit Tests'
        run: pnpm test:ci
      - name: 'Report Coverage'
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2
      - name: 'Lint Code'
        run: pnpm lint

  test-e2e:
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
      - uses: actions/checkout@v4
      - name: 'Install Docker'
        run: |
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io
      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: 'Install Dependencies'
        run: |
          pnpm install --frozen-lockfile
      - name: 'Install Playwright Browsers'
        run: pnpm exec playwright install
      - name: 'Create Docker network'
        run: docker network create test-network
      - name: 'Set up test database'
        run: |
          docker run --name test-db -e POSTGRES_PASSWORD=${{ secrets.TEST_DB_PASSWORD }} -e POSTGRES_DB=forvoyez -p 5432:5432 --network test-network -d postgres
          docker run --link test-db:postgres --network test-network --rm postgres sh -c 'until pg_isready -h postgres -U postgres; do sleep 1; done;'
      - name: 'Build Docker Image for testing'
        run: |
          docker build -f Dockerfile -t forvoyez:test .
      - name: 'Run database migrations and seeding'
        run: |
          docker run --name forvoyez-container -e DATABASE_URL=postgresql://postgres:${{ secrets.TEST_DB_PASSWORD }}@test-db:5432/forvoyez --network test-network forvoyez:test sh -c "pnpm prisma migrate dev && pnpm prisma db seed"
      - name: 'Start Docker Container'
        run: |
          docker run -d --name forvoyez-container -p 3000:3000 \
            -e NEXT_PUBLIC_URL=${{ secrets.NEXT_PUBLIC_URL }} \
            -e CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }} \
            -e CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }} \
            -e NEXT_PUBLIC_CLERK_SIGN_IN_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }} \
            -e NEXT_PUBLIC_CLERK_SIGN_UP_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }} \
            -e NEXT_PUBLIC_CLERK_SIGN_OUT_URL=${{ secrets.NEXT_PUBLIC_CLERK_SIGN_OUT_URL }} \
            -e MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }} \
            -e MAILGUN_API_URL=${{ secrets.MAILGUN_API_URL }} \
            -e MAILGUN_PUBLIC_KEY=${{ secrets.MAILGUN_PUBLIC_KEY }} \
            -e MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }} \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e LEMON_SQUEEZY_API_KEY=${{ secrets.LEMON_SQUEEZY_API_KEY }} \
            -e LEMON_SQUEEZY_STORE_ID=${{ secrets.LEMON_SQUEEZY_STORE_ID }} \
            -e LEMON_SQUEEZY_WEBHOOK_SECRET=${{ secrets.LEMON_SQUEEZY_WEBHOOK_SECRET }} \
            -e DATABASE_URL=postgresql://postgres:${{ secrets.TEST_DB_PASSWORD }}@test-db:5432/forvoyez \
            --network test-network \
            forvoyez:test
      - name: 'Wait for the application to be ready'
        run: |
          echo "Waiting for the application to be ready..."
          end=$((SECONDS+30))
          while [ $SECONDS -lt $end ]; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Application is up!"
              exit 0
            fi
            echo "Waiting for the application to be up..."
            sleep 5
          done
          echo "Application did not start in time"
          docker logs forvoyez-container
          exit 1
      - name: 'Run E2E Tests'
        run: pnpm test:e2e:general
        env:
          NEXT_PUBLIC_URL: http://localhost:3000
          TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
          TEST_EMAIL_SUB: ${{ secrets.TEST_EMAIL_SUB }}
          TEST_PASSWORD_SUB: ${{ secrets.TEST_PASSWORD_SUB }}
          ENABLE_TEST_LOGS: ${{ secrets.ENABLE_TEST_LOGS }}
          CLERK_FRONTEND_API: ${{ secrets.CLERK_FRONTEND_API }}
      - name: 'Stop and remove Docker Containers'
        run: |
          docker stop forvoyez-container
          docker rm forvoyez-container
          docker stop test-db
          docker rm test-db
