generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// a table to store the new generated api key for the user, it will be used to recognize the user in the API
// should have : uuid, user link, created at, expired at, name (optional)
model Token {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [clerkId])
  userId    String
  jwt       String
  createdAt DateTime @default(now())
  expiredAt DateTime
  name      String?
  Usage     Usage[]
}

// a table to store the user information
// should have a link to the Clerk user id, the remaning api credits, other fields will be added later
model User {
  clerkId      String         @id
  customerId   Int?
  credits      Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Token        Token[]
  Usage        Usage[]
  Subscription Subscription[]
  WebhookEvent WebhookEvent[]
}

// a table to store the user's api usage
// should have: user link, used at, used credits (how many credits the user used in this request), wich api the user used, and with with token
model Usage {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [clerkId])
  userId  String
  usedAt  DateTime @default(now())
  used    Int
  api     String
  token   Token    @relation(fields: [tokenId], references: [id])
  tokenId String
}

model Plan {
  id                 Int            @id @default(autoincrement())
  productId          String
  productName        String?
  variantId          String
  name               String
  description        String?
  price              Int
  unit               Int            @default(1)
  isUsageBased       Boolean        @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  sort               Int?
  Subscription       Subscription[]
}

model Subscription {
  id                 Int     @id @default(autoincrement())
  lemonSqueezyId     String  @unique
  orderId            Int
  name               String
  email              String
  status             String
  statusFormatted    String
  renewsAt           String? // Assumes text fields can be nullable if not marked @notNull in Drizzle
  endsAt             String?
  trialEndsAt        String?
  price              String
  isUsageBased       Boolean @default(false)
  isPaused           Boolean @default(false)
  subscriptionItemId Int
  userId             String
  planId             Int

  users User @relation(fields: [userId], references: [clerkId])
  plans Plan @relation(fields: [planId], references: [id])
}

model WebhookEvent {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            String
  userId          String
  processingError String?
  customerId      Int?

  users User @relation(fields: [userId], references: [clerkId])
}
