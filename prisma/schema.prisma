generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [clerkId])
  userId    String
  jwt       String
  createdAt DateTime @default(now())
  expiredAt DateTime
  name      String?
  Usage     Usage[]
}

model User {
  clerkId      String         @id
  customerId   Int?
  credits      Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Token        Token[]
  Usage        Usage[]
  Subscription Subscription[]
  WebhookEvent WebhookEvent[]
}

model Usage {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [clerkId])
  userId  String
  usedAt  DateTime @default(now())
  used    Int
  api     String   @default("describe")
  token   Token?   @relation(fields: [tokenId], references: [id])
  tokenId String?
}

model Plan {
  id             Int      @id @default(autoincrement())
  productId      String
  variantId      String   @unique
  variantEnabled Boolean  @default(true)
  name           String
  description    String?
  price          Int // Prix de base en centimes pour une unité
  billingCycle   String? // "monthly" or "annually"
  packageSize    Int? // Nombre d'unités inclus dans le package
  createdAt      DateTime @default(now())
  mostPopular    Boolean  @default(false)
  features       String   @default("[]")
  buttonText     String   @default("Subscribe")

  subscriptions Subscription[]
}

model Subscription {
  id              Int     @id @default(autoincrement())
  lemonSqueezyId  String  @unique
  orderId         Int
  name            String
  email           String
  status          String
  statusFormatted String
  renewsAt        String? // Assumes text fields can be nullable if not marked @notNull in Drizzle
  endsAt          String?
  trialEndsAt     String?
  isUsageBased    Boolean @default(false)
  isPaused        Boolean @default(false)
  userId          String
  planId          Int
  customerId      String

  user User @relation(fields: [userId], references: [clerkId])
  plan Plan @relation(fields: [planId], references: [id])
}

model WebhookEvent {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            String
  userId          String
  processingError String?
  customerId      Int?

  user User @relation(fields: [userId], references: [clerkId])
}
